---
# roles/docker/tasks/install.yml
- name: "[Install] Gather facts"
  ansible.builtin.setup:

- name: "[Install] Disable host firewall per HX policy"
  when: docker_manage_firewall
  block:
    - name: "[Firewall] Disable UFW if present (Debian/Ubuntu)"
      ansible.builtin.command: ufw disable
      args: { warn: false }
      register: ufw_disable
      failed_when: false
      changed_when: "'already disabled' not in (ufw_disable.stdout | default('') | lower)"
      when: ansible_facts.os_family == "Debian"

    - name: "[Firewall] Stop & disable firewalld if present (RHEL/CentOS)"
      ansible.builtin.service:
        name: firewalld
        state: stopped
        enabled: no
      register: fwld
      failed_when: false
      when: ansible_facts.os_family == "RedHat"

- name: "[Install:Debian] Ensure apt dependencies"
  ansible.builtin.apt:
    name: [ca-certificates, curl, gnupg, lsb-release]
    state: present
    update_cache: yes
  when: ansible_facts.os_family == "Debian"

- name: "[Install:Debian] Add Docker GPG"
  ansible.builtin.apt_key:
    url: "https://download.docker.com/linux/{{ ansible_facts.distribution | lower }}/gpg"
    state: present
  when: ansible_facts.os_family == "Debian"

- name: "[Install:Debian] Map architecture to Debian-style"
  ansible.builtin.set_fact:
    docker_debian_arch: >-
      {{ 'amd64' if ansible_facts.architecture == 'x86_64'
         else 'arm64' if ansible_facts.architecture == 'aarch64'
         else 'armhf' if ansible_facts.architecture == 'armv7l'
         else 'i386' if ansible_facts.architecture == 'i386'
         else ansible_facts.architecture }}
  when: ansible_facts.os_family == "Debian"

- name: "[Install:Debian] Add Docker apt repo"
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ docker_debian_arch }}] https://download.docker.com/linux/{{ ansible_facts.distribution | lower }} {{ ansible_facts.distribution_release }} stable"
    state: present
  when: ansible_facts.os_family == "Debian"

- name: "[Install:Debian] Install Docker packages"
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: "{{ docker_package_state }}"
    update_cache: yes
  when: ansible_facts.os_family == "Debian"

- name: "[Install:RHEL] Ensure yum-utils"
  ansible.builtin.yum:
    name: yum-utils
    state: present
  when: ansible_facts.os_family == "RedHat"

- name: "[Install:RHEL] Add Docker yum repo"
  ansible.builtin.yum_repository:
    name: docker-ce-stable
    description: Docker CE Stable
    baseurl: https://download.docker.com/linux/centos/{{ ansible_facts.distribution_major_version }}/$basearch/stable
    gpgcheck: yes
    gpgkey: https://download.docker.com/linux/centos/gpg
    enabled: yes
    state: present
  when: ansible_facts.os_family == "RedHat"

- name: "[Install:RHEL] Install Docker packages"
  ansible.builtin.yum:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: "{{ docker_package_state }}"
  when: ansible_facts.os_family == "RedHat"

- name: "[Install] Ensure docker group"
  ansible.builtin.group:
    name: docker
    state: present

- name: "[Install] Add operators to docker group"
  ansible.builtin.user:
    name: "{{ item }}"
    groups: docker
    append: yes
  loop: "{{ docker_users }}"

- name: "[Install] Start/enable Docker service"
  ansible.builtin.service:
    name: docker
    state: "{{ docker_service_state }}"
    enabled: "{{ docker_service_enabled }}"
