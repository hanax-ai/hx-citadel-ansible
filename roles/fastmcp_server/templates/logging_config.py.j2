#!/usr/bin/env python3
"""
Structured Logging Configuration for Shield MCP Server
Generated by Ansible for {{ ansible_hostname }}

Uses structlog for JSON-formatted, structured logging with proper context
"""

import logging
import sys
import os
from typing import Any
import structlog


def configure_structured_logging() -> structlog.BoundLogger:
    """
    Configure structured logging with JSON output
    
    Returns:
        structlog.BoundLogger: Configured logger instance
    """
    
    # Get log level from environment
    log_level_str = os.getenv("FASTMCP_LOG_LEVEL", "INFO").upper()
    log_level = getattr(logging, log_level_str, logging.INFO)
    
    # Get log format from environment (json or console)
    log_format = os.getenv("LOG_FORMAT", "json").lower()
    
    # Configure standard library logging
    logging.basicConfig(
        format="%(message)s",
        stream=sys.stdout,
        level=log_level,
    )
    
    # Structlog processors
    shared_processors = [
        # Add log level to event dict
        structlog.stdlib.add_log_level,
        # Add logger name
        structlog.stdlib.add_logger_name,
        # Add timestamp
        structlog.processors.TimeStamper(fmt="iso", utc=True),
        # Add process and thread info
        structlog.processors.ProcessorFormatter.wrap_for_formatter,
    ]
    
    # Choose renderer based on format
    if log_format == "json":
        renderer = structlog.processors.JSONRenderer()
    else:
        # Console renderer with colors for development
        renderer = structlog.dev.ConsoleRenderer(
            colors=sys.stdout.isatty(),
            exception_formatter=structlog.dev.better_traceback
        )
    
    # Configure structlog
    structlog.configure(
        processors=shared_processors + [
            # Format positional args
            structlog.stdlib.PositionalArgumentsFormatter(),
            # Add stack info for exceptions
            structlog.processors.StackInfoRenderer(),
            # Format exceptions
            structlog.processors.format_exc_info,
            # Decode unicode
            structlog.processors.UnicodeDecoder(),
            # Render to JSON or console
            renderer,
        ],
        # Use standard library's logger
        wrapper_class=structlog.stdlib.BoundLogger,
        logger_factory=structlog.stdlib.LoggerFactory(),
        # Cache logger instances
        cache_logger_on_first_use=True,
    )
    
    # Get logger instance
    logger = structlog.get_logger("shield-mcp")
    
    # Log configuration
    logger.info(
        "logging_configured",
        log_level=log_level_str,
        log_format=log_format,
        hostname=os.getenv("HOSTNAME", "unknown"),
        server_name=os.getenv("FASTMCP_SERVER_NAME", "Shield MCP Server")
    )
    
    return logger


def get_logger(name: str = "shield-mcp") -> structlog.BoundLogger:
    """
    Get a logger instance with the specified name
    
    Args:
        name: Logger name
        
    Returns:
        structlog.BoundLogger: Logger instance
    """
    return structlog.get_logger(name)


# Logging helper functions for common patterns

def log_tool_execution(logger: structlog.BoundLogger, tool_name: str, **kwargs: Any) -> None:
    """Log tool execution start"""
    logger.info(
        "tool_execution_start",
        tool=tool_name,
        **kwargs
    )


def log_tool_success(logger: structlog.BoundLogger, tool_name: str, duration_ms: float, **kwargs: Any) -> None:
    """Log tool execution success"""
    logger.info(
        "tool_execution_success",
        tool=tool_name,
        duration_ms=duration_ms,
        **kwargs
    )


def log_tool_failure(logger: structlog.BoundLogger, tool_name: str, error: Exception, **kwargs: Any) -> None:
    """Log tool execution failure"""
    logger.error(
        "tool_execution_failure",
        tool=tool_name,
        error=str(error),
        error_type=type(error).__name__,
        **kwargs,
        exc_info=True
    )


def log_dependency_call(logger: structlog.BoundLogger, service: str, endpoint: str, **kwargs: Any) -> None:
    """Log external dependency call"""
    logger.debug(
        "dependency_call",
        service=service,
        endpoint=endpoint,
        **kwargs
    )


def log_circuit_breaker_open(logger: structlog.BoundLogger, service: str, **kwargs: Any) -> None:
    """Log circuit breaker opening"""
    logger.warning(
        "circuit_breaker_open",
        service=service,
        **kwargs
    )


def log_circuit_breaker_closed(logger: structlog.BoundLogger, service: str, **kwargs: Any) -> None:
    """Log circuit breaker closing"""
    logger.info(
        "circuit_breaker_closed",
        service=service,
        **kwargs
    )


# Example usage patterns for documentation
if __name__ == "__main__":
    # Configure logging
    logger = configure_structured_logging()
    
    # Example log entries
    logger.info("server_starting", port=8081, transport="sse")
    logger.info("dependency_connected", service="qdrant", url="https://192.168.10.9:6333")
    
    # Example tool execution logging
    log_tool_execution(logger, "crawl_web", url="https://example.com")
    log_tool_success(logger, "crawl_web", duration_ms=1234.56, pages_crawled=10)
    
    # Example error logging
    try:
        raise ValueError("Example error")
    except Exception as e:
        log_tool_failure(logger, "example_tool", e)
    
    # Example with context
    logger = logger.bind(request_id="12345", user="agent0")
    logger.info("processing_request", action="query")
    
    print("\n--- JSON Output Example ---")
    print("See stdout for JSON-formatted logs")
