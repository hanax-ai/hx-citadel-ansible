#!/bin/bash
# HX-Citadel Shield Base System Health Check
# Managed by Ansible - Generated: {{ ansible_date_time.iso8601 }}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Thresholds
DISK_THRESHOLD={{ health_check_disk_threshold | default(80) }}
MEMORY_THRESHOLD={{ health_check_memory_threshold | default(85) }}
CPU_THRESHOLD={{ health_check_cpu_threshold | default(90) }}

# Cron mode flag (suppress colors and interactive output)
CRON_MODE=false
if [[ "$1" == "--cron" ]]; then
    CRON_MODE=true
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
fi

# Exit status (0 = healthy, 1 = warnings, 2 = critical)
EXIT_STATUS=0

echo_header() {
    if [ "$CRON_MODE" = false ]; then
        echo -e "${BLUE}═══════════════════════════════════════════════${NC}"
        echo -e "${BLUE}  HX-Citadel Shield - Base System Health Check${NC}"
        echo -e "${BLUE}═══════════════════════════════════════════════${NC}"
        echo -e "  Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
        echo -e "${BLUE}═══════════════════════════════════════════════${NC}"
        echo ""
    else
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] Health Check Start"
    fi
}

check_disk_space() {
    echo -e "${BLUE}[Disk Space]${NC}"
    local critical=false
    
    # Check root filesystem
    local root_usage=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
    if [ "$root_usage" -ge "$DISK_THRESHOLD" ]; then
        echo -e "  Root (/): ${RED}${root_usage}% (Threshold: ${DISK_THRESHOLD}%)${NC}"
        critical=true
        EXIT_STATUS=2
    else
        echo -e "  Root (/): ${GREEN}${root_usage}%${NC}"
    fi
    
    # Check application directory
    local app_usage=$(df -h {{ app_dir }} | awk 'NR==2 {print $5}' | sed 's/%//')
    if [ "$app_usage" -ge "$DISK_THRESHOLD" ]; then
        echo -e "  App ({{ app_dir }}): ${RED}${app_usage}% (Threshold: ${DISK_THRESHOLD}%)${NC}"
        critical=true
        EXIT_STATUS=2
    else
        echo -e "  App ({{ app_dir }}): ${GREEN}${app_usage}%${NC}"
    fi
    
    # Check log directory
    local log_usage=$(df -h {{ log_dir }} | awk 'NR==2 {print $5}' | sed 's/%//')
    if [ "$log_usage" -ge "$DISK_THRESHOLD" ]; then
        echo -e "  Logs ({{ log_dir }}): ${RED}${log_usage}% (Threshold: ${DISK_THRESHOLD}%)${NC}"
        critical=true
        EXIT_STATUS=2
    else
        echo -e "  Logs ({{ log_dir }}): ${GREEN}${log_usage}%${NC}"
    fi
    
    echo ""
    return $([ "$critical" = true ] && echo 1 || echo 0)
}

check_memory() {
    echo -e "${BLUE}[Memory Usage]${NC}"
    
    # Get memory stats
    local total_mem=$(free -m | awk 'NR==2 {print $2}')
    local used_mem=$(free -m | awk 'NR==2 {print $3}')
    local free_mem=$(free -m | awk 'NR==2 {print $4}')
    local available_mem=$(free -m | awk 'NR==2 {print $7}')
    local mem_percent=$((used_mem * 100 / total_mem))
    
    if [ "$mem_percent" -ge "$MEMORY_THRESHOLD" ]; then
        echo -e "  Memory: ${RED}${mem_percent}% (${used_mem}M / ${total_mem}M) - Threshold: ${MEMORY_THRESHOLD}%${NC}"
        [ "$EXIT_STATUS" -lt 1 ] && EXIT_STATUS=1
    else
        echo -e "  Memory: ${GREEN}${mem_percent}% (${used_mem}M / ${total_mem}M)${NC}"
    fi
    
    echo -e "  Available: ${available_mem}M"
    
    # Check swap
    local swap_total=$(free -m | awk 'NR==3 {print $2}')
    local swap_used=$(free -m | awk 'NR==3 {print $3}')
    if [ "$swap_total" -gt 0 ]; then
        local swap_percent=$((swap_used * 100 / swap_total))
        if [ "$swap_percent" -ge 50 ]; then
            echo -e "  Swap: ${YELLOW}${swap_percent}% (${swap_used}M / ${swap_total}M)${NC}"
            [ "$EXIT_STATUS" -lt 1 ] && EXIT_STATUS=1
        else
            echo -e "  Swap: ${GREEN}${swap_percent}% (${swap_used}M / ${swap_total}M)${NC}"
        fi
    else
        echo -e "  Swap: ${YELLOW}Not configured${NC}"
    fi
    
    echo ""
}

check_cpu() {
    echo -e "${BLUE}[CPU Usage]${NC}"
    
    # Get CPU load averages
    local load_avg=$(uptime | awk -F'load average:' '{print $2}')
    local cpu_count=$(nproc)
    local load_1min=$(echo "$load_avg" | awk -F',' '{print $1}' | xargs)
    
    echo -e "  Load Average: $load_avg"
    echo -e "  CPU Cores: $cpu_count"
    
    # Get current CPU usage (1 second average)
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')
    local cpu_int=$(printf "%.0f" "$cpu_usage")
    
    if [ "$cpu_int" -ge "$CPU_THRESHOLD" ]; then
        echo -e "  CPU: ${RED}${cpu_usage}% (Threshold: ${CPU_THRESHOLD}%)${NC}"
        [ "$EXIT_STATUS" -lt 1 ] && EXIT_STATUS=1
    else
        echo -e "  CPU: ${GREEN}${cpu_usage}%${NC}"
    fi
    
    echo ""
}

check_directories() {
    echo -e "${BLUE}[Critical Directories]${NC}"
    local critical=false
    
    directories=(
        "{{ app_dir }}"
        "{{ log_dir }}"
        "{{ app_dir }}/venv"
        "{{ app_dir }}/scripts"
    )
    
    for dir in "${directories[@]}"; do
        if [ -d "$dir" ]; then
            echo -e "  ${GREEN}✓${NC} $dir"
        else
            echo -e "  ${RED}✗${NC} $dir (missing)"
            critical=true
            EXIT_STATUS=2
        fi
    done
    
    echo ""
    return $([ "$critical" = true ] && echo 1 || echo 0)
}

check_python_env() {
    echo -e "${BLUE}[Python Environment]${NC}"
    
    if [ -f "{{ app_dir }}/venv/bin/python" ]; then
        local py_version=$({{ app_dir }}/venv/bin/python --version 2>&1)
        echo -e "  ${GREEN}✓${NC} $py_version"
        
        if [ -f "{{ app_dir }}/venv/bin/poetry" ]; then
            local poetry_version=$({{ app_dir }}/venv/bin/poetry --version 2>&1)
            echo -e "  ${GREEN}✓${NC} $poetry_version"
        else
            echo -e "  ${YELLOW}⚠${NC} Poetry not found"
        fi
    else
        echo -e "  ${RED}✗${NC} Python virtual environment not found"
        EXIT_STATUS=2
    fi
    
    echo ""
}

check_services() {
    echo -e "${BLUE}[Service Status]${NC}"
    
    services=("orchestrator" "litellm")
    
    for service in "${services[@]}"; do
        if systemctl list-unit-files | grep -q "^${service}.service"; then
            if systemctl is-active --quiet "$service"; then
                local uptime=$(systemctl show "$service" --property=ActiveEnterTimestamp --value)
                echo -e "  ${GREEN}✓${NC} $service (active) - Started: $uptime"
            else
                echo -e "  ${YELLOW}⚠${NC} $service (inactive)"
            fi
        else
            echo -e "  ${YELLOW}⚠${NC} $service (not configured)"
        fi
    done
    
    echo ""
}

check_network() {
    echo -e "${BLUE}[Network Connectivity]${NC}"
    
    # Check localhost
    if ping -c 1 -W 1 127.0.0.1 > /dev/null 2>&1; then
        echo -e "  ${GREEN}✓${NC} Localhost reachable"
    else
        echo -e "  ${RED}✗${NC} Localhost unreachable"
        EXIT_STATUS=2
    fi
    
    # Check internet connectivity
    if ping -c 1 -W 2 8.8.8.8 > /dev/null 2>&1; then
        echo -e "  ${GREEN}✓${NC} Internet connectivity"
    else
        echo -e "  ${YELLOW}⚠${NC} No internet connectivity"
    fi
    
    echo ""
}

print_summary() {
    if [ "$CRON_MODE" = false ]; then
        echo -e "${BLUE}═══════════════════════════════════════════════${NC}"
    fi
    
    if [ "$EXIT_STATUS" -eq 0 ]; then
        echo -e "${GREEN}✓ System Health: ALL CHECKS PASSED${NC}"
    elif [ "$EXIT_STATUS" -eq 1 ]; then
        echo -e "${YELLOW}⚠ System Health: WARNINGS DETECTED${NC}"
    else
        echo -e "${RED}✗ System Health: CRITICAL ISSUES DETECTED${NC}"
    fi
    
    if [ "$CRON_MODE" = false ]; then
        echo -e "${BLUE}═══════════════════════════════════════════════${NC}"
    fi
}

# Main execution
main() {
    echo_header
    check_disk_space
    check_memory
    check_cpu
    check_directories
    check_python_env
    check_services
    check_network
    print_summary
    
    exit "$EXIT_STATUS"
}

main
