"""
CopilotKit API Endpoints
Component 10: Human-in-the-Loop Frontend Integration

FastAPI router for CopilotKit integration with shield-power-ui.
Provides SSE streaming and action execution endpoints.

Generated by Ansible for {{ ansible_hostname }}
"""

from fastapi import APIRouter, HTTPException, Request
from fastapi.responses import StreamingResponse
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
import logging

from services.copilotkit_adapter import copilotkit_adapter

router = APIRouter()
logger = logging.getLogger("shield-orchestrator.api.copilotkit")


# Request/Response Models
class CopilotKitAction(BaseModel):
    """CopilotKit action request model."""
    action: str = Field(..., description="Action name to execute")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Action parameters")


class CopilotKitResponse(BaseModel):
    """CopilotKit action response model."""
    success: bool = Field(..., description="Whether action succeeded")
    action: Optional[str] = Field(None, description="Action that was executed")
    result: Optional[Any] = Field(None, description="Action result data")
    error: Optional[str] = Field(None, description="Error message if failed")
    timestamp: Optional[str] = Field(None, description="Response timestamp")


class AvailableAction(BaseModel):
    """Available action descriptor."""
    name: str
    description: str
    parameters: List[str]


# Endpoints

@router.get("/stream/{job_id}")
async def copilotkit_stream(job_id: str):
    """
    Server-Sent Events (SSE) endpoint for real-time job state streaming.
    
    Used by useCopilotReadable hook in shield-power-ui to subscribe to
    job progress updates.
    
    Args:
        job_id: Job identifier to stream
        
    Returns:
        StreamingResponse with text/event-stream content
        
    Example:
        GET /copilotkit/stream/abc123
        
        Response (SSE):
        data: {"type":"state","data":{"jobId":"abc123","status":"running","progress":45}}
        
        data: {"type":"state","data":{"jobId":"abc123","status":"completed","progress":100}}
    """
    logger.info(f"SSE stream requested for job: {job_id}")
    
    return StreamingResponse(
        copilotkit_adapter.stream_state(job_id),
        media_type="text/event-stream",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
            "X-Accel-Buffering": "no",  # Disable nginx buffering
        }
    )


@router.post("/actions", response_model=CopilotKitResponse)
async def copilotkit_action(action_request: CopilotKitAction):
    """
    Action execution endpoint for useCopilotAction hook.
    
    Executes backend actions triggered by frontend interactions.
    
    Args:
        action_request: Action name and parameters
        
    Returns:
        CopilotKitResponse with action result
        
    Example:
        POST /copilotkit/actions
        {
          "action": "search_knowledge",
          "parameters": {
            "query": "What is LightRAG?",
            "mode": "hybrid"
          }
        }
        
        Response:
        {
          "success": true,
          "action": "search_knowledge",
          "result": {...},
          "timestamp": "2025-10-10T05:15:00.000Z"
        }
    """
    logger.info(f"Action execution requested: {action_request.action}")
    
    try:
        result = await copilotkit_adapter.execute_action(
            action_name=action_request.action,
            parameters=action_request.parameters
        )
        
        return result
    
    except Exception as e:
        logger.error(f"Action execution failed: {e}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail=f"Action execution failed: {str(e)}"
        )


@router.get("/actions", response_model=List[AvailableAction])
async def list_available_actions():
    """
    List available CopilotKit actions.
    
    Returns metadata about actions that can be executed via
    the /actions endpoint.
    
    Returns:
        List of available actions with descriptions
        
    Example:
        GET /copilotkit/actions
        
        Response:
        [
          {
            "name": "search_knowledge",
            "description": "Search the knowledge graph",
            "parameters": ["query", "mode"]
          },
          ...
        ]
    """
    return [
{% for action in copilotkit_actions %}
        AvailableAction(
            name="{{ action.name }}",
            description="{{ action.description }}",
            parameters={{ action.parameters | to_json }}
        ),
{% endfor %}
    ]


@router.get("/health")
async def copilotkit_health():
    """
    CopilotKit adapter health check.
    
    Returns:
        Health status of CopilotKit adapter
    """
    return {
        "status": "healthy",
        "component": "copilotkit_adapter",
        "sse_endpoint": "{{ copilotkit_sse_endpoint }}",
        "actions_endpoint": "{{ copilotkit_actions_endpoint }}",
        "available_actions": len([{% for action in copilotkit_actions %}1{% if not loop.last %},{% endif %}{% endfor %}])
    }


@router.options("/stream/{job_id}")
@router.options("/actions")
async def copilotkit_options():
    """
    Handle OPTIONS requests for CORS preflight.
    
    FastAPI middleware handles CORS, but this provides explicit
    OPTIONS handling for CopilotKit endpoints.
    """
    return {"detail": "OK"}
