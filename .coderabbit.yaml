---
# CodeRabbit Configuration - HX-Citadel Ansible
# Documentation: https://docs.coderabbit.ai/guides/configure-coderabbit/

# Language and model settings
language: en
early_access: true  # Enable beta features (like auto-test generation)
enable_free_tier: false

# Review settings
reviews:
  # Disable poems in walkthrough (per CodeRabbit tip)
  poem: false

  # Auto-review configuration
  auto_review:
    enabled: true
    drafts: false  # Don't review draft PRs
    base_branches:
      - main
      - master
      - develop

  # Issue categorization


  # Request changes for critical issues
  request_changes_workflow: true

  # High-level summary
  high_level_summary: true

  # Detailed review comment settings
  review_status: true
  collapse_walkthrough: false

  # Finishing touches for PRs
  finishing_touches:
    unit_tests:
      enabled: true

  # Tool integration
  tools:
    # Enable shellcheck for bash scripts
    shellcheck:
      enabled: true

    # Enable yamllint for YAML files
    yamllint:
      enabled: true

    # Enable markdownlint for documentation
    markdownlint:
      enabled: true

  # Path-specific instructions (nitpick filtering)
  path_instructions:
    - path: "docs/**/*.md"
      instructions: |
        - Focus on critical issues only
        - Ignore markdown formatting (MD040, MD034, MD036)
        - Ignore line length and whitespace issues
    - path: "roles/*/tasks/*.yml"
      instructions: |
        - Enforce FQCN (ansible.builtin.*)
        - Require changed_when for command/shell
        - Check explicit file permissions

# Path-based review rules
# NOTE: CodeRabbit auto-detects file types; explicit path_filters not needed
# Instead, use path_instructions below for custom guidance per path

# Linear integration (Phase 2A)
integrations:
  linear:
    enabled: true

    # Linear workspace configuration
    # Team: HANA-X Ai (key: HAN)
    # Team ID: 82355734-bc0c-49c6-ba88-6ad2ca50865a
    # API Key: Configured in CodeRabbit web interface (GitHub secret)
    team_key: "HAN"

    # Auto-create Linear issues for specific findings
    auto_create_issue:
      enabled: true

      # Only create issues for critical and high severity
      severity_levels:
        - critical
        - high

      # Issue template
      title_template: "[CodeRabbit] {finding_type}: {file_name}"

      # Labels to apply
      labels:
        - "coderabbit-finding"
        - "auto-generated"

      # Priority mapping (CodeRabbit ‚Üí Linear)
      priority_mapping:
        critical: 1  # Urgent
        high: 2      # High
        medium: 3    # Medium
        low: 4       # Low

    # Link existing Linear issues in PR description
    issue_linking:
      enabled: true
      validate_against_board: true

  # GitHub settings
  github:
    # Auto-label PRs based on findings
    auto_label:
      enabled: true
      labels:
        has_critical: "‚ö†Ô∏è critical-findings"
        has_security: "üîí security"
        needs_tests: "üß™ needs-tests"
        documentation_only: "üìù documentation"

    # PR check status
    check_status:
      enabled: true
      failure_threshold: "critical"  # Only fail on critical issues

# Notification settings
notifications:
  # Slack integration (optional - Phase 3)
  slack:
    enabled: false
    webhook_url: ""  # Add in Phase 3

  # Comment style
  comment_style: "concise"  # Options: concise, detailed, minimal

# Ignore patterns (performance optimization)
ignore:
  # Don't review generated files
  - "**/*.pyc"
  - "**/__pycache__/**"
  - ".pytest_cache/**"
  - "reports/**"
  - ".mypy_cache/**"

  # Don't review vendored dependencies
  - "tech_kb/**"  # Large knowledge base
  - "roles/*/files/vendor/**"

  # Don't review lock files
  - "poetry.lock"
  - "Pipfile.lock"

# Custom project rules
# NOTE: CodeRabbit uses tools.ansible-lint and tools.shellcheck for enforcement
# Custom severity rules defined in severity_thresholds section above
#
# Ansible rules enforced via tools.ansible-lint.enabled: true
# Python rules enforced via standard CodeRabbit analysis
# For project-specific guidance, use path_instructions (lines 63-73)

# Notes for Claude Code:
#
# This configuration enables:
# 1. Auto-test generation with pytest (addresses TASK-032)
# 2. Linear issue auto-creation for critical/high findings (Phase 2A)
# 3. Ansible-specific linting (ansible-lint, FQCN enforcement)
# 4. Security-focused review (secrets detection, vulnerabilities)
# 5. Smart path filtering (critical vs documentation vs tests)
#
# Usage:
# - CodeRabbit will automatically apply this config to all PRs
# - Generated tests will be auto-committed to PR branches
# - Critical/high findings will create Linear issues automatically
# - Integration with Linear board validation enabled
#
# Next steps:
# 1. Commit this file to repository root
# 2. Enable Linear integration in CodeRabbit settings
# 3. Create Linear labels: coderabbit-finding, auto-generated
# 4. Test with a small PR to validate configuration
