"""
Integration snippet for main.py
Add these imports and update lifespan function
"""

# ===== ADD TO IMPORTS SECTION (after existing imports) =====
from services.agent_manager import agent_manager
from services.workflow_manager import workflow_manager
from database.connection import DatabaseManager


# ===== UPDATE lifespan FUNCTION =====
@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Application lifespan manager.
    
    Startup:
      - Initialize Redis Streams
      - Initialize database (create tables)
      - Initialize Qdrant vector database
      - Initialize LightRAG engine
      - Initialize event bus
      - Initialize Pydantic AI agents (Component 8)
      - Initialize LangGraph workflows (Component 9)
      - Start worker pool
    
    Shutdown:
      - Graceful worker shutdown
      - Close workflows
      - Close agents
      - Close event bus
      - Close LightRAG engine
      - Close Qdrant
      - Close Redis
    """
    logger.info("üöÄ Shield Orchestrator starting...")
    
    # Startup sequence
    await init_redis()
    await init_database()
    await init_qdrant()
    await init_lightrag()
    await init_event_bus()
    
    # Initialize Component 8: Pydantic AI Agents
    try:
        await agent_manager.initialize()
        logger.info("‚úÖ Pydantic AI agents initialized")
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize agents: {e}")
        raise
    
    # Initialize Component 9: LangGraph Workflows
    try:
        db_engine = DatabaseManager.get_engine()
        await workflow_manager.initialize(db_engine)
        logger.info("‚úÖ LangGraph workflows initialized")
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize workflows: {e}")
        raise
    
    await start_worker_pool()
    
    logger.info("‚úÖ Shield Orchestrator ready!")
    
    yield  # Application runs
    
    logger.info("üõë Shield Orchestrator shutting down...")
    
    # Shutdown sequence (reverse order)
    await stop_worker_pool()
    
    # Shutdown Component 9 and 8
    try:
        await workflow_manager.shutdown()
        await agent_manager.shutdown()
        logger.info("‚úÖ Agents and workflows shutdown complete")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Error during agent/workflow shutdown: {e}")
    
    await close_event_bus()
    await close_lightrag()
    await close_qdrant()
    await close_redis()
    
    logger.info("‚úÖ Shutdown complete")
