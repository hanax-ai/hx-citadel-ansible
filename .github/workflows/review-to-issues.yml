name: Review to Issues

on:
  # Trigger when CodeRabbit or Claude posts a review comment
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]
  
  # Manual trigger for processing saved reviews
  workflow_dispatch:
    inputs:
      review_file:
        description: 'Path to review file (e.g., docs/ci-cd/coderabbit/review.md)'
        required: true
        type: string
      pr_number:
        description: 'PR number'
        required: true
        type: string

jobs:
  parse-and-create-issues:
    name: Parse Review and Create GitHub Issues
    runs-on: ubuntu-latest
    
    # Only run if comment is from a bot reviewer
    if: |
      (github.event_name == 'issue_comment' && 
       (github.event.comment.user.login == 'coderabbitai[bot]' || 
        github.event.comment.user.login == 'claude[bot]')) ||
      (github.event_name == 'pull_request_review' && 
       (github.event.review.user.login == 'coderabbitai[bot]' || 
        github.event.review.user.login == 'claude[bot]')) ||
      github.event_name == 'workflow_dispatch'
    
    permissions:
      issues: write
      pull-requests: read
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Extract review text from comment
        id: extract
        if: github.event_name != 'workflow_dispatch'
        run: |
          # Save comment/review body to file
          mkdir -p /tmp/reviews
          
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            echo '${{ github.event.comment.body }}' > /tmp/reviews/current_review.md
            PR_NUM=$(echo "${{ github.event.issue.html_url }}" | grep -oP '\d+$')
          elif [ "${{ github.event_name }}" == "pull_request_review" ]; then
            echo '${{ github.event.review.body }}' > /tmp/reviews/current_review.md
            PR_NUM=${{ github.event.pull_request.number }}
          elif [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
            echo '${{ github.event.comment.body }}' > /tmp/reviews/current_review.md
            PR_NUM=${{ github.event.pull_request.number }}
          fi
          
          echo "pr_number=$PR_NUM" >> $GITHUB_OUTPUT
          echo "review_file=/tmp/reviews/current_review.md" >> $GITHUB_OUTPUT
      
      - name: Parse review and create issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            REVIEW_FILE="${{ github.event.inputs.review_file }}"
            PR_NUM="${{ github.event.inputs.pr_number }}"
          else
            REVIEW_FILE="${{ steps.extract.outputs.review_file }}"
            PR_NUM="${{ steps.extract.outputs.pr_number }}"
          fi
          
          echo "üìù Processing review for PR #$PR_NUM"
          echo "üìÑ Review file: $REVIEW_FILE"
          
          # Check if review file exists and has content
          if [ ! -f "$REVIEW_FILE" ] || [ ! -s "$REVIEW_FILE" ]; then
            echo "‚ö†Ô∏è  Review file not found or empty, skipping"
            exit 0
          fi
          
          # Check if review contains issues to create
          if ! grep -q "CRITICAL ISSUES\|MAJOR ISSUES" "$REVIEW_FILE"; then
            echo "‚ÑπÔ∏è  No CRITICAL or MAJOR issues found in review, skipping"
            exit 0
          fi
          
          # Run parser script
          python3 .github/scripts/parse-review-create-issues.py \
            "$REVIEW_FILE" \
            "$PR_NUM" \
            "$GITHUB_TOKEN"
      
      - name: Comment on PR
        if: success() && github.event_name != 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.extract.outputs.pr_number }};
            
            const commentBody = [
              'ü§ñ **Automated Issue Creation**',
              '',
              "I've parsed the code review and automatically created GitHub issues for all CRITICAL and MAJOR findings.",
              '',
              `Check the [Issues tab](${context.payload.repository.html_url}/issues) for the newly created issues.`,
              '',
              'All issues are labeled with:',
              '- `code-review` - From automated review',
              '- `automated` - Auto-created by workflow',
              '- `critical` or `major` - Based on severity',
              '',
              '---',
              '*Automated by: `.github/workflows/review-to-issues.yml`*'
            ].join('\n');
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
      
      - name: Upload review file as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: parsed-review-${{ github.run_id }}
          path: /tmp/reviews/
          retention-days: 30

