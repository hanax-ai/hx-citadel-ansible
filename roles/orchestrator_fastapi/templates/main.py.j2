#!/usr/bin/env python3
"""
Shield Orchestrator - Main Application
Generated by Ansible for {{ ansible_hostname }}
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from contextlib import asynccontextmanager
import logging

from config.settings import settings
from api import health
from utils.logging_config import setup_logging

# Setup logging
setup_logging()
logger = logging.getLogger("shield-orchestrator")

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Application lifespan manager.
    
    Startup:
      - Initialize database connections
      - Start worker pool
      - Initialize LightRAG engine
      - Setup Redis Streams
    
    Shutdown:
      - Graceful worker shutdown
      - Close database connections
      - Cleanup resources
    """
    logger.info("ðŸš€ Shield Orchestrator starting...")
    
    # TODO: Initialize components (in subsequent deployments)
    # await init_database()
    # await init_redis_streams()
    # await init_lightrag()
    # await start_worker_pool()
    
    logger.info("âœ… Shield Orchestrator ready!")
    
    yield  # Application runs
    
    logger.info("ðŸ›‘ Shield Orchestrator shutting down...")
    
    # TODO: Cleanup (in subsequent deployments)
    # await stop_worker_pool()
    # await close_database()
    # await close_redis()
    
    logger.info("âœ… Shutdown complete")

# Create FastAPI application
app = FastAPI(
    title="{{ api_title }}",
    version="{{ api_version }}",
    description="{{ api_description }}",
    docs_url="{{ api_docs_url }}",
    redoc_url="{{ api_redoc_url }}",
    openapi_url="{{ api_openapi_url }}",
    lifespan=lifespan
)

# Add CORS middleware
{% if cors_enabled %}
app.add_middleware(
    CORSMiddleware,
    allow_origins={{ cors_origins | to_json }},
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
{% endif %}

# Add trusted host middleware (security)
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=[
        "{{ hx_hosts_fqdn['hx-orchestrator-server'] }}",
        "hx-orchestrator-server",
        "localhost",
        "127.0.0.1"
    ]
)

# Include routers
app.include_router(health.router, tags=["health"])

# TODO: Add additional routers in subsequent deployments
# app.include_router(ingestion.router, prefix="/lightrag", tags=["ingestion"])
# app.include_router(query.router, prefix="/lightrag", tags=["query"])
# app.include_router(jobs.router, prefix="/jobs", tags=["jobs"])
# app.include_router(events.router, prefix="/events", tags=["events"])

@app.get("/")
async def root():
    """Root endpoint - API information"""
    return {
        "service": "Shield Orchestrator",
        "version": "{{ api_version }}",
        "status": "operational",
        "docs": "{{ api_docs_url }}",
        "health": "{{ health_check_path }}"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="{{ orchestrator_host }}",
        port={{ orchestrator_port }},
        workers={{ orchestrator_workers }},
        loop="uvloop",
        log_config="{{ log_config_file }}",
        reload={{ orchestrator_reload | lower }}
    )
